/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package exebank;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Edward Vergel
 */
public class gui extends javax.swing.JFrame {

    DefaultTableModel model;
    String BD = "jdbc:postgresql://ec2-3-231-69-204.compute-1.amazonaws.com:5432/da7h3qajcvr1c8";
    String user = "sfywxdrkesegee";
    String pw = "6b8334dc491a6a65d449e58855d7926bb0bbef6a087acc8b85f7a65824ccc6ac";

    public gui() {
        initComponents();
        model = new DefaultTableModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        callChiefs = new javax.swing.JButton();
        callUsers = new javax.swing.JButton();
        callEmpKids = new javax.swing.JToggleButton();
        callWorkingATM = new javax.swing.JButton();
        callAfilliateAccounts = new javax.swing.JButton();
        callAccounts = new javax.swing.JToggleButton();
        callTransactions = new javax.swing.JToggleButton();
        callAPA = new javax.swing.JButton();
        callpEmpDept = new javax.swing.JToggleButton();
        callBAccounts = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 220, 460, 380));

        callChiefs.setText("Ver Jefes de Departamento");
        callChiefs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callChiefsActionPerformed(evt);
            }
        });
        jPanel1.add(callChiefs, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 180, -1));

        callUsers.setText("Ver Usuarios");
        callUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callUsersActionPerformed(evt);
            }
        });
        jPanel1.add(callUsers, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 180, -1));

        callEmpKids.setText("Ver Empleados con Bono");
        callEmpKids.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callEmpKidsActionPerformed(evt);
            }
        });
        jPanel1.add(callEmpKids, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, 170, -1));

        callWorkingATM.setText("Ver Cajeros Operativos");
        callWorkingATM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callWorkingATMActionPerformed(evt);
            }
        });
        jPanel1.add(callWorkingATM, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 70, 170, -1));

        callAfilliateAccounts.setText("Ver Cuentas Afiliadas");
        callAfilliateAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callAfilliateAccountsActionPerformed(evt);
            }
        });
        jPanel1.add(callAfilliateAccounts, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, 170, -1));

        callAccounts.setText("Ver Cuentas");
        callAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callAccountsActionPerformed(evt);
            }
        });
        jPanel1.add(callAccounts, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 70, 170, -1));

        callTransactions.setText("Ver Transacciones");
        callTransactions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callTransactionsActionPerformed(evt);
            }
        });
        jPanel1.add(callTransactions, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 180, -1));

        callAPA.setText("Ver Cuentas Por Departamento");
        callAPA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callAPAActionPerformed(evt);
            }
        });
        jPanel1.add(callAPA, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 120, 180, -1));

        callpEmpDept.setText("Ver Trabajadores por Departamento");
        callpEmpDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callpEmpDeptActionPerformed(evt);
            }
        });
        jPanel1.add(callpEmpDept, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 120, 220, -1));

        callBAccounts.setText(" Ver Cuentas Importantes");
        callBAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callBAccountsActionPerformed(evt);
            }
        });
        jPanel1.add(callBAccounts, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 180, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void callChiefsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callChiefsActionPerformed
        try {
            Connection conect = DriverManager.getConnection(BD, user, pw);
            java.sql.Statement st = conect.createStatement();
            String query1 = "SELECT DISTINCT concat(u.first_name, ' ', u.last_name) as DEPARTMENTCHIEF, d.department_name as DEPARTMENT from users u JOIN employees e on u.ssn = e.employee_ssn INNER JOIN departments d on e.id = d.department_chief;";
            ResultSet result = st.executeQuery(query1);

            model.addColumn("Chief");
            model.addColumn("Department");
            this.tabla.setModel(model);

            String data[] = new String[2];

            while (result.next()) {

                data[0] = result.getString("DEPARTMENTCHIEF");
                data[1] = result.getString("DEPARTMENT");
                model.addRow(data);
            }

            result.close();
            st.close();
            conect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_callChiefsActionPerformed

    private void callUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callUsersActionPerformed
        try {
            Connection conect = DriverManager.getConnection(BD, user, pw);
            java.sql.Statement st = conect.createStatement();
            String query1 = "SELECT * FROM users;";
            ResultSet result = st.executeQuery(query1);

            model.addColumn("User");
            model.addColumn("SSN");
            model.addColumn("Nationality");
            this.tabla.setModel(model);

            String data[] = new String[3];

            while (result.next()) {

                data[0] = result.getString("username");
                data[1] = result.getString("ssn");
                data[2] = result.getString("nationality");
                model.addRow(data);
            }

            result.close();
            st.close();
            conect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_callUsersActionPerformed

    private void callEmpKidsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callEmpKidsActionPerformed
        try {
            Connection conect = DriverManager.getConnection(BD, user, pw);
            java.sql.Statement st = conect.createStatement();
            String query1 = "SELECT concat(u.first_name,' ', u.last_name) as Employee_Name, concat(fm.first_name, ' ', fm.last_name) as kid_name, EXTRACT(DAY FROM (date_trunc('year',current_date)-date_trunc('year',fm.date_of_birth))/365 )as kids_age, CASE WHEN(EXTRACT(DAY FROM (date_trunc('year',current_date)-date_trunc('year',fm.date_of_birth))/365 ) < 8) THEN 'SI' ELSE 'NO' END as extraPayment from users u INNER JOIN employees e on u.ssn = e.employee_ssn INNER JOIN family_members fm on e.id = fm.employee_id;";
            ResultSet result = st.executeQuery(query1);

            model.addColumn("Empleado");
            model.addColumn("Hijo");
            model.addColumn("Edad del Hijo");
            model.addColumn("Pago Extra");
            this.tabla.setModel(model);

            String data[] = new String[4];

            while (result.next()) {

                data[0] = result.getString("Employee_Name");
                data[1] = result.getString("kid_name");
                data[2] = result.getString("kids_age");
                data[3] = result.getString("extraPayment");
                model.addRow(data);
            }

            result.close();
            st.close();
            conect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_callEmpKidsActionPerformed

    private void callWorkingATMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callWorkingATMActionPerformed
        try {
            Connection conect = DriverManager.getConnection(BD, user, pw);
            java.sql.Statement st = conect.createStatement();
            String query1 = "SELECT h.city as City, h.address_line1 as address_line, zipcode as zipcode, a.working_days as working_Days, isworking from headquarters h INNER JOIN atms a on h.id = a.headquarter_id where(a.isworking)";
            ResultSet result = st.executeQuery(query1);

            model.addColumn("Ciudad");
            model.addColumn("Direccion");
            model.addColumn("Codigo Zip");
            model.addColumn("Trabaja");
            this.tabla.setModel(model);

            String data[] = new String[4];

            while (result.next()) {

                data[0] = result.getString("City");
                data[1] = result.getString("address_line");
                data[2] = result.getString("zipcode");
                data[3] = result.getString("working_Days");
                model.addRow(data);
            }

            result.close();
            st.close();
            conect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_callWorkingATMActionPerformed

    private void callAfilliateAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callAfilliateAccountsActionPerformed
        try {
            Connection conect = DriverManager.getConnection(BD, user, pw);
            java.sql.Statement st = conect.createStatement();
            String query1 = "SELECT concat(u.first_name, ' ', u.middle_name,' ', u.last_name, ' ', u.second_last_name) as account_owner, aa.recipient_name as affiliated_person FROM users u INNER JOIN accounts a on u.id = a.owner INNER JOIN affiliated_accounts aa on a.account_number = aa.sender_account_number;";
            ResultSet result = st.executeQuery(query1);

            model.addColumn("Dueño");
            model.addColumn("Afiliado");
            this.tabla.setModel(model);

            String data[] = new String[2];

            while (result.next()) {

                data[0] = result.getString("account_owner");
                data[1] = result.getString("affiliated_person");

                model.addRow(data);
            }

            result.close();
            st.close();
            conect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_callAfilliateAccountsActionPerformed

    private void callAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callAccountsActionPerformed
        try {
            Connection conect = DriverManager.getConnection(BD, user, pw);
            java.sql.Statement st = conect.createStatement();
            String query1 = "SELECT u.ssn as SSN, concat(u.first_name, ' ', u.last_name) as Name, a.account_number as account_number, a.account_type as account_type, a.account_balance as balance from users u INNER JOIN accounts a on u.id = a.owner;";
            ResultSet result = st.executeQuery(query1);

            model.addColumn("SSN");
            model.addColumn("Nombre");
            model.addColumn("# de Cuenta");
            model.addColumn("Tipo");
            model.addColumn("Balance");
            this.tabla.setModel(model);

            String data[] = new String[5];

            while (result.next()) {

                data[0] = result.getString("SSN");
                data[1] = result.getString("Name");
                data[2] = result.getString("account_number");
                data[3] = result.getString("account_type");
                data[4] = result.getString("balance");

                model.addRow(data);
            }

            result.close();
            st.close();
            conect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_callAccountsActionPerformed

    private void callTransactionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callTransactionsActionPerformed
        try {
            Connection conect = DriverManager.getConnection(BD, user, pw);
            java.sql.Statement st = conect.createStatement();
            String query1 = "SELECT u.ssn as SSN, concat(u.first_name, ' ', u.last_name) as Sender_name, t.sender_account as Sender_account, t.recipient_account as recipient_account, t.amount as Amount_sent FROM users u INNER JOIN accounts a on u.id = a.owner INNER JOIN transactions t on a.account_number = t.sender_account;";
            ResultSet result = st.executeQuery(query1);

            model.addColumn("SSN");
            model.addColumn("Emisor");
            model.addColumn("Cuenta Emisor");
            model.addColumn("Cuenta Receptor");
            model.addColumn("Monto");
            this.tabla.setModel(model);

            String data[] = new String[5];

            while (result.next()) {

                data[0] = result.getString("SSN");
                data[1] = result.getString("Sender_name");
                data[2] = result.getString("Sender_account");
                data[3] = result.getString("recipient_account");
                data[4] = result.getString("Amount_sent");

                model.addRow(data);
            }

            result.close();
            st.close();
            conect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_callTransactionsActionPerformed

    private void callAPAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callAPAActionPerformed
        try {
            Connection conect = DriverManager.getConnection(BD, user, pw);
            java.sql.Statement st = conect.createStatement();
            String query1 = "SELECT account_number, account_type, h.country as country, h.city as city, h.zipcode as zip from accounts a INNER JOIN headquarters h on a.headquarter_id = h.id ORDER BY city;";
            ResultSet result = st.executeQuery(query1);

            model.addColumn("Cuenta");
            model.addColumn("Tipo de Cuenta");
            model.addColumn("Pais");
            model.addColumn("Ciudad");
            model.addColumn("Codigo Zip");
            this.tabla.setModel(model);

            String data[] = new String[5];

            while (result.next()) {

                data[0] = result.getString("account_number");
                data[1] = result.getString("account_type");
                data[2] = result.getString("country");
                data[3] = result.getString("city");
                data[4] = result.getString("zip");

                model.addRow(data);
            }

            result.close();
            st.close();
            conect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_callAPAActionPerformed

    private void callpEmpDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callpEmpDeptActionPerformed
        try {
            Connection conect = DriverManager.getConnection(BD, user, pw);
            java.sql.Statement st = conect.createStatement();
            String query1 = "SELECT count(e.id) as employees, d.department_name as department_name, h.city as city  from employees e INNER JOIN departments d on e.department_id = d.id INNER JOIN headquarters h on h.id = d.headquarter_id GROUP BY d.id, h.city";
            ResultSet result = st.executeQuery(query1);

            model.addColumn("Cantidad");
            model.addColumn("Departamento");
            model.addColumn("Ciudad");
            this.tabla.setModel(model);

            String data[] = new String[3];

            while (result.next()) {

                data[0] = result.getString("employees");
                data[1] = result.getString("department_name");
                data[2] = result.getString("city");

                model.addRow(data);
            }

            result.close();
            st.close();
            conect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_callpEmpDeptActionPerformed

    private void callBAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callBAccountsActionPerformed
        try {
            Connection conect = DriverManager.getConnection(BD, user, pw);
            java.sql.Statement st = conect.createStatement();
            String query1 = "SELECT concat(first_name, ' ', last_name) as full_name, account_number as account_number, a.account_balance as balance, a.account_type as account_type from users u INNER JOIN accounts a on u.id = a.owner WHERE(a.account_balance > 20000) ORDER BY balance desc;";
            ResultSet result = st.executeQuery(query1);

            model.addColumn("Nombre");
            model.addColumn("# de Cuenta");
            model.addColumn("Balance");
            model.addColumn("Tipo");
            this.tabla.setModel(model);

            String data[] = new String[4];

            while (result.next()) {

                data[0] = result.getString("full_name");
                data[1] = result.getString("account_number");
                data[2] = result.getString("balance");
                data[3] = result.getString("account_type");

                model.addRow(data);
            }

            result.close();
            st.close();
            conect.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_callBAccountsActionPerformed

    public void resetTable() {
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton callAPA;
    private javax.swing.JToggleButton callAccounts;
    private javax.swing.JButton callAfilliateAccounts;
    private javax.swing.JButton callBAccounts;
    private javax.swing.JButton callChiefs;
    private javax.swing.JToggleButton callEmpKids;
    private javax.swing.JToggleButton callTransactions;
    private javax.swing.JButton callUsers;
    private javax.swing.JButton callWorkingATM;
    private javax.swing.JToggleButton callpEmpDept;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
